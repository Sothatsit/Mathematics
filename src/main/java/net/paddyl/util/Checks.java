package net.paddyl.util;

import java.lang.reflect.Array;
import java.util.Objects;
import java.util.function.Supplier;

/**
 * A collection of assertions to guarantee parameter constraints or to guarantee conditions in tests.
 *
 * @author Paddy Lamont
 */
public class Checks {

    /**
     * An exception thrown when an assertion fails.
     */
    public static class AssertionFailure extends RuntimeException {

        /**
         * Construct an assertion failure with the reason {@param reason}.
         *
         * @param reason the reason for this assertion failure
         */
        public AssertionFailure(String reason) {
            super(reason);
        }
    }

    /**
     * Throw an assertion failure with the reason {@param reason};
     *
     * @param reason the reason for this assertion failure
     *
     * @throws AssertionFailure
     */
    public static void fail(String reason) {
        throw new AssertionFailure(reason);
    }

    /**
     * Returns {@param name} surrounded by single quotes and spaces, unless it is
     * null or empty, in which case {@param backup} is returned surrounded by spaces.
     */
    private static String quote(String name, String backup) {
        if (name == null || name.isEmpty()) {
            if (backup == null || backup.trim().isEmpty())
                return " ";
            return " " + backup + " ";
        }

        int bracketIndex = name.indexOf('[');
        if (bracketIndex < 0)
            return " '" + name + "' ";

        String brackets = name.substring(bracketIndex);
        return " '" + name.substring(0, bracketIndex) + "'" + brackets + " ";
    }

    /**
     * Returns {@param name} surrounded by single quotes and spaces,
     * unless it is null or empty, in which case " " is returned.
     */
    private static String quote(String name) {
        return quote(name, "");
    }

    /**
     * Returns " '{@param name}' = {@param value} ", unless {@param name} is null or empty,
     * in which case {@param value} converted to a string is returned.
     */
    private static String quoteEquals(String name, Object value) {
        if (name == null || name.isEmpty())
            return Objects.toString(value);
        return quote(name) + "= " + value + " ";
    }

    /**
     * Returns " '{@param name}'[{@param index}] ", unless {@param name}
     * is null or empty, in which case " " is returned.
     */
    private static String quoteIndexed(String name, String backup, int index) {
        if (name == null || name.isEmpty())
            return " ";
        return " " + quote(name, backup).trim() + "[" + index + "] ";
    }

    /**
     * Assert that {@param value} is true, throwing an assertion failure
     * with the reason {@param reason} if the assertion fails.
     *
     * @param value  the value that you assert to be true
     * @param reason the reason if this assertion fails
     */
    public static void assertThat(boolean value, String reason) {
        if(value)
            return;
        fail(reason);
    }

    /**
     * Assert that {@param value} is true, throwing an assertion failure
     * with the reason generated by {@param reasonGenerator} if the assertion fails.
     *
     * @param value           the value that you assert to be true
     * @param reasonGenerator generates the reason if this assertion fails
     */
    public static void assertThat(boolean value, Supplier<String> reasonGenerator) {
        if(value)
            return;
        fail(reasonGenerator.get());
    }

    /**
     * Assert that {@param value} is true.
     *
     * @param value the value that should be true
     */
    public static void assertTrue(boolean value) {
        assertTrue(value, "");
    }

    /**
     * Assert that {@param value} is true.
     *
     * @param value the value that should be true
     * @param name  the name of the value that should have been true
     */
    public static void assertTrue(boolean value, String name) {
        if(value)
            return;

        fail("Expected" + quote(name, "value") + "to be true");
    }

    /**
     * Assert that {@param value} is false.
     *
     * @param value the value that should be false
     */
    public static void assertFalse(boolean value) {
        assertFalse(value, "");
    }

    /**
     * Assert that {@param value} is false.
     *
     * @param value the value that should be false
     * @param name  the name of the value that should have been false
     */
    public static void assertFalse(boolean value, String name) {
        if(!value)
            return;

        fail("Expected" + quote(name, "value") + "to be false");
    }

    /**
     * Assert that {@param value} is greater than zero.
     *
     * @param value the value that must be greater than zero
     */
    public static void assertPositive(Number value) {
        assertPositive(value, "");
    }

    /**
     * Assert that {@param value} is greater than zero.
     *
     * @param value the value that must be greater than zero
     * @param name  the name of the value
     */
    public static void assertPositive(Number value, String name) {
        if (Numbers.greaterThan(value, 0))
            return;

        fail("Expected" + quote(name, "value") + "to be greater than zero, but it was " + value);
    }

    /**
     * Assert that {@param value} is greater than or equal to zero.
     *
     * @param value the value that must be greater than or equal to zero
     */
    public static void assertNotNegative(Number value) {
        assertNotNegative(value, "");
    }

    /**
     * Assert that {@param value} is greater than or equal to zero.
     *
     * @param value the value that must be greater than or equal to zero
     * @param name  the name of the value
     */
    public static void assertNotNegative(Number value, String name) {
        if (Numbers.greaterThanOrEqual(value, 0))
            return;

        fail("Expected" + quote(name, "value") + "to be greater than or equal to zero, but it was " + value);
    }

    /**
     * Assert that {@param value} is not zero.
     *
     * @param value the value that must not be zero
     */
    public static void assertNonZero(Number value) {
        assertNonZero(value, "");
    }

    /**
     * Assert that {@param value} is not zero.
     *
     * @param value the value that must not be zero
     * @param name  the name of the value
     */
    public static void assertNonZero(Number value, String name) {
        if (!Numbers.equal(value, 0))
            return;

        fail("Expected" + quote(name, "value") + "to be non-zero");
    }

    /**
     * Assert that {@param one} is equal to {@param two}.
     *
     * @param one the first value
     * @param two the second value
     */
    public static void assertEquals(Object one, Object two) {
        assertEquals(one, "one", two, "two");
    }

    /**
     * Assert that {@param one} is equal to {@param two}.
     *
     * @param one     the first value
     * @param oneName the name of the first value
     * @param two     the second value
     * @param twoName the name of the second value
     */
    public static void assertEquals(Object one, String oneName, Object two, String twoName) {
        if (one instanceof Number && two instanceof Number) {
            if (Numbers.equal((Number) one, (Number) two))
                return;
        } else if (Objects.equals(one, two))  {
            return;
        }

        if(one != null && two != null && one.getClass().isArray() && two.getClass().isArray()) {
            assertArraysEqual(one, oneName, two, twoName);
            return;
        }

        fail("Expected" + quoteEquals(oneName, one) + "to equal" + quoteEquals(twoName, two));
    }

    /**
     * Assert that the contents of {@param one} are equal to the contents of {@param two}.
     *
     * @param one the first array
     * @param two the second array
     */
    public static void assertArraysEqual(Object one, Object two) {
        assertArraysEqual(one, "first", two, "second");
    }

    /**
     * Assert that the contents of {@param array1} are equal to the contents of {@param array2}.
     *
     * @param one     the first value
     * @param oneName the name of the first value
     * @param two     the second value
     * @param twoName the name of the second value
     */
    public static void assertArraysEqual(Object one, String oneName, Object two, String twoName) {
        assertNonNull(one, "one");
        assertNonNull(two, "two");

        assertThat(one.getClass().isArray(), "one must be an array");
        assertThat(two.getClass().isArray(), "two must be an array");

        oneName = (oneName != null && !oneName.isEmpty() ? oneName : "first");
        twoName = (twoName != null && !twoName.isEmpty() ? twoName : "second");

        int length1 = Array.getLength(one);
        int length2 = Array.getLength(two);
        if(length1 != length2) {
            String oneStr = "the" + quote(oneName) + "array of length " + length1;
            String twoStr = "the" + quote(twoName) + "array of length " + length2;
            fail("Expected " + oneStr + " to be the same length as " + twoStr);
            return;
        }

        for(int index = 0; index < length1; ++index) {
            Object valueOne = Array.get(one, index);
            Object valueTwo = Array.get(two, index);
            assertEquals(valueOne, oneName + "[" + index + "]", valueTwo, twoName + "[" + index + "]");
        }
    }

    /**
     * Assert that the potentially multi dimensional array {@param array}
     * is non-null and contains only non-null values.
     *
     * @param array the array you wish to assert contains all non-null values
     * @param name  the name of the array that must be non-null
     */
    public static void assertArrayNonNull(Object array, String name) {
        assertNonNull(array, name);

        if(!array.getClass().isArray()) {
            fail("Expected" + quote(name, "array") + "to be an array");
            return;
        }

        int size = Array.getLength(array);
        for(int index = 0; index < size; ++index) {
            Object value = Array.get(array, index);

            if (value == null) {
                fail("Expected" + quoteIndexed(name, "array", index) + "to be non-null");
                return;
            }

            if (!value.getClass().isArray())
                continue;

            assertArrayNonNull(value, name + "[" + index + "]");
        }
    }

    /**
     * Assert that {@param value} is non-null.
     *
     * @param value the value that should be non-null
     * @param name  the name of the value
     */
    public static void assertNonNull(Object value, String name) {
        if (value != null)
            return;
        fail("Expected" + quote(name, "value") + "to be non-null");
    }

    /**
     * Assert that running {@param runnable} throws an {@link AssertionFailure}.
     *
     * @param runnable the runnable that should throw the assertion failure
     */
    public static void assertFails(Runnable runnable) {
        assertThrows(runnable, AssertionFailure.class);
    }

    /**
     * Assert that running {@param runnable} throws an exception of type {@param exceptionClass}.
     *
     * @param runnable       the runnable that should throw the exception
     * @param exceptionClass the type of the exception that should be thrown
     */
    public static void assertThrows(Runnable runnable, Class<? extends Exception> exceptionClass) {
        String exceptionName = exceptionClass.getSimpleName();

        try {
            runnable.run();
        } catch (Exception thrown) {
            Class<? extends Exception> thrownClass = thrown.getClass();
            String thrownName = thrownClass.getSimpleName();

            if (exceptionClass.isAssignableFrom(thrownClass))
                return;

            fail(
                "Expected an exception of type " + exceptionName + " to be thrown, " +
                "but an exception of type " + thrownName + " was thrown instead"
            );
            return;
        }

        fail(
            "Expected an exception of type " + exceptionName + " to be thrown, " +
            "but no exception was thrown"
        );
    }

    /**
     * Assert that {@param value} falls within the range {@param lower} inclusive to {@param upper} exclusive.
     *
     * @param value the value to be checked
     * @param name  the name of the value
     * @param lower the lower value of the range, inclusive
     * @param upper the upper value of the range, exclusive
     */
    public static void assertInRange(Number value, String name, Number lower, Number upper) {
        assertGreaterThanOrEqual(upper, "upper", lower, "lower");
        if (Numbers.greaterThanOrEqual(value, lower) && Numbers.lessThan(value, upper))
            return;

        fail(
            "Expected" + quote(name, "value") + "to be in the range " + lower +
            " inclusive to " + upper + " exclusive, whereas " + value + " was given"
        );
    }

    /**
     * Assert that {@param index} is a valid index into the array {@param array}.
     *
     * @param index     the index into the array
     * @param indexName the name to be used for the length in the error message
     * @param array     the array to be indexed
     * @param arrayName the name to be used for the index in the error message
     */
    public static <T> void assertIndexValid(int index, String indexName, T[] array, String arrayName) {
        assertIndexValid(index, indexName, array.length, arrayName);
    }

    /**
     * Assert that {@param index} is a valid index into the array {@param array}.
     *
     * @param index       the index to be checked
     * @param indexName   the name to be used for the index in the error message
     * @param arrayLength the length of the array {@param index} is to be used to index into
     * @param arrayName   the name to be used for the array in the error message
     */
    public static void assertIndexValid(int index, String indexName, int arrayLength, String arrayName) {
        if (Numbers.greaterThanOrEqual(index, 0) && Numbers.lessThan(index, arrayLength))
            return;

        String indexStr = "the index" + quoteEquals(indexName, index);
        String arrayStr = "the array" + quote(arrayName) + "of length " + arrayLength;
        fail("Expected a valid index, but " + indexStr + "is invalid for " + arrayStr);
    }

    /**
     * Assert that {@param shouldBeLow} is less than {@param shouldBeHigh}.
     *
     * @param shouldBeLow  The number that should be lower
     * @param shouldBeHigh The number that should be higher
     */
    public static void assertLessThan(Number shouldBeLow, Number shouldBeHigh) {
        assertLessThan(shouldBeLow, "shouldBeLow", shouldBeHigh, "shouldBeHigh");
    }

    /**
     * Assert that {@param shouldBeLow} is less than {@param shouldBeHigh}.
     *
     * @param shouldBeLow  The number that should be lower
     * @param lowName      The name of the low value
     * @param shouldBeHigh The number that should be higher
     * @param highName     The name of the high value
     */
    public static void assertLessThan(Number shouldBeLow, String lowName, Number shouldBeHigh, String highName) {
        if (Numbers.lessThan(shouldBeLow, shouldBeHigh))
            return;

        fail(
            "Expected" + quote(lowName, "shouldBeLow") + "= " + shouldBeLow +
            " to be less than" + quote(highName, "shouldBeHigh") + "= " + shouldBeHigh
        );
    }

    /**
     * Assert that {@param shouldBeLow} is less than or equal to {@param shouldBeHigh}.
     *
     * @param shouldBeLow  The number that should be lower
     * @param shouldBeHigh The number that should be higher
     */
    public static void assertLessThanOrEqual(Number shouldBeLow, Number shouldBeHigh) {
        assertLessThanOrEqual(shouldBeLow, "shouldBeLow", shouldBeHigh, "shouldBeHigh");
    }

    /**
     * Assert that {@param shouldBeLow} is less than or equal to {@param shouldBeHigh}.
     *
     * @param shouldBeLow  The number that should be lower
     * @param lowName      The name of the low value
     * @param shouldBeHigh The number that should be higher
     * @param highName     The name of the high value
     */
    public static void assertLessThanOrEqual(Number shouldBeLow, String lowName, Number shouldBeHigh, String highName) {
        if (Numbers.lessThanOrEqual(shouldBeLow, shouldBeHigh))
            return;

        fail(
            "Expected" + quote(lowName, "shouldBeLow") + "= " + shouldBeLow +
            " to be less than or equal to" + quote(highName, "shouldBeHigh") + "= " + shouldBeHigh
        );
    }

    /**
     * Assert that {@param shouldBeLow} is greater than {@param shouldBeHigh}.
     *
     * @param shouldBeHigh The number that should be higher
     * @param shouldBeLow  The number that should be lower
     */
    public static void assertGreaterThan(Number shouldBeHigh, Number shouldBeLow) {
        assertGreaterThan(shouldBeHigh, "shouldBeHigh", shouldBeLow, "shouldBeLow");
    }

    /**
     * Assert that {@param shouldBeLow} is greater than {@param shouldBeHigh}.
     *
     * @param shouldBeHigh The number that should be higher
     * @param highName     The name of the high value
     * @param shouldBeLow  The number that should be lower
     * @param lowName      The name of the low value
     */
    public static void assertGreaterThan(Number shouldBeHigh, String highName, Number shouldBeLow, String lowName) {
        if (Numbers.greaterThan(shouldBeHigh, shouldBeLow))
            return;

        fail(
            "Expected" + quote(highName, "shouldBeHigh") + "= " + shouldBeHigh +
            " to be greater than" + quote(lowName, "shouldBeLow") + "= " + shouldBeLow
        );
    }

    /**
     * Assert that {@param shouldBeLow} is greater than or equal to {@param shouldBeHigh}.
     *
     * @param shouldBeHigh The number that should be higher
     * @param shouldBeLow  The number that should be lower
     */
    public static void assertGreaterThanOrEqual(Number shouldBeHigh, Number shouldBeLow) {
        assertGreaterThanOrEqual(shouldBeHigh, "shouldBeHigh", shouldBeLow, "shouldBeLow");
    }

    /**
     * Assert that {@param shouldBeLow} is greater than or equal to {@param shouldBeHigh}.
     *
     * @param shouldBeHigh The number that should be higher
     * @param highName     The name of the high value
     * @param shouldBeLow  The number that should be lower
     * @param lowName      The name of the low value
     */
    public static void assertGreaterThanOrEqual(Number shouldBeHigh, String highName, Number shouldBeLow, String lowName) {
        if (Numbers.greaterThanOrEqual(shouldBeHigh, shouldBeLow))
            return;

        fail(
            "Expected" + quote(highName, "shouldBeHigh") + "= " + shouldBeHigh +
            " to be greater than or equal to" + quote(lowName, "shouldBeLow") + "= " + shouldBeLow
        );
    }

    /**
     * Assert that the absolute difference between {@param one}
     * and {@param two} is less than or equal to {@param epsilon}.
     *
     * @param one     The first value
     * @param two     The second value
     * @param epsilon The maximum allowable difference between {@param one} and {@param two}
     */
    public static void assertEquals(Number one, Number two, Number epsilon) {
        assertEquals(one, "one", two, "two", epsilon);
    }

    /**
     * Assert that the absolute difference between {@param one}
     * and {@param two} is less than or equal to {@param epsilon}.
     *
     * @param one     The first value
     * @param oneName The name of the first value
     * @param two     The second value
     * @param twoName The name of the second value
     * @param epsilon The maximum allowable difference between {@param one} and {@param two}
     */
    public static void assertEquals(Number one, String oneName, Number two, String twoName, Number epsilon) {
        if (Numbers.equal(one, two, epsilon))
            return;

        fail(
            "Expected the difference between" + quote(oneName, "one") + "= " + one +
            " and" + quote(twoName, "two") + "= " + two + " to be less than or equal to " + epsilon +
            ", but the difference is " + Numbers.absoluteDifference(one, two)
        );
    }
}
